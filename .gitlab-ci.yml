stages:
  - install
  - build
  - dockerize
  - deploy

variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE/myapp   # Docker image name
  SSH_USER: ubuntu                       # EC2 username
  SERVER_IP: 3.110.189.252               # EC2 public IP
  CI_REGISTRY: registry.gitlab.com       # GitLab container registry

# 1️⃣ Install dependencies
install_dependencies:
  stage: install
  image: node:20-alpine
  script:
    - npm ci --include=dev
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
  artifacts:
    paths:
      - node_modules/
  only:
    - main

# 2️⃣ Build app
build_app:
  stage: build
  image: node:20-alpine
  script:
    - npm ci --include=dev
    - npx tsc -b || echo "Skipping TypeScript build (if not applicable)"
    - npm run build
  artifacts:
    paths:
      - dist/
  dependencies:
    - install_dependencies
  only:
    - main

# 3️⃣ Docker build & push
docker_build:
  stage: dockerize
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "Logging into GitLab Container Registry..."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - echo "Building Docker image..."
    - docker build -t "$IMAGE_NAME:$CI_COMMIT_SHORT_SHA" .
    - docker push "$IMAGE_NAME:$CI_COMMIT_SHORT_SHA"
    - docker tag "$IMAGE_NAME:$CI_COMMIT_SHORT_SHA" "$IMAGE_NAME:latest"
    - docker push "$IMAGE_NAME:latest"
  dependencies:
    - build_app
  only:
    - main

# 4️⃣ Deploy to EC2
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client bash
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H "$SERVER_IP" >> ~/.ssh/known_hosts
  script:
    - echo "🔗 Connecting to EC2 and deploying latest image..."
    - |
      ssh -o StrictHostKeyChecking=no $SSH_USER@$SERVER_IP "
        set -e
        echo 'Logging into GitLab Container Registry...';
        sudo docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY;

        echo 'Pulling latest Docker image...';
        sudo docker pull $IMAGE_NAME:latest;

        echo 'Stopping old container (if exists)...';
        sudo docker stop portfolio || true;

        echo 'Removing old container (if exists)...';
        sudo docker rm portfolio || true;

        echo 'Starting new container on port 80...';
        sudo docker run -d -p 80:80 --name portfolio $IMAGE_NAME:latest;

        echo '✅ Deployment completed successfully!';
      "
  dependencies:
    - docker_build
  only:
    - main
